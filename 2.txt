package dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import model.Employee;

public class EmployeeDao {
	
	private String jdbcURL = "jdbc:mysql://database-1.c8covifcvsel.ap-south-1.rds.amazonaws.com:3306/employee?useSSL=false";
	private String jdbcUsername = "admin";
	private String jdbcPassword = "manu12345";
	
	private static final String INSERT_EMPLOYEES_SQL = "INSERT INTO employees" + "(empid,empname,empadd) VALUES" + "(?,?,?);";
	
	private static final String SELECT_EMPLOYEE_BY_ID = "select empid, empname, empadd from employees where empid=?";
	private static final String SELECT_ALL_EMPLOYEES = "select * from employees";
	private static final String DELETE_EMPLOYEES_SQL = "delete from employees where empid = ?;";
	private static final String UPDATE_EMPLOYEES_SQL = "update employees set empname = ?,empadd = ? where empid = ?;";
	
	protected Connection getConnection() {
		Connection connection = null;
		try {
			Class.forName("com.mysql.jdbc.Driver");
			connection = DriverManager.getConnection(jdbcURL, jdbcUsername, jdbcPassword);
			
		} catch(SQLException e) {
			e.printStackTrace();
		}catch(ClassNotFoundException e) {
			e.printStackTrace();
		}
		return connection;
	}
	public void insertEmployee(Employee employee) throws SQLException {
		try (Connection connection = getConnection();
				PreparedStatement preparedStatement = connection.prepareStatement(INSERT_EMPLOYEES_SQL)){
			preparedStatement.setString(2, employee.getEmpName());
			preparedStatement.setString(3, employee.getEmpAdd());
			preparedStatement.setInt(1, employee.getEmpId());
			System.out.println(preparedStatement);
			preparedStatement.executeUpdate();
		}catch(Exception e) {
			e.printStackTrace();
		}
	}
	// update employee
	public boolean updateEmployee(Employee employee) throws SQLException{
		boolean rowUpdated;
		try (Connection connection = getConnection();
				PreparedStatement statement = connection.prepareStatement(UPDATE_EMPLOYEES_SQL);){
					statement.setString(1, employee.getEmpName());
					statement.setString(2, employee.getEmpAdd());
					statement.setInt(3, employee.getEmpId());
					
					rowUpdated = statement.executeUpdate() > 0;
				}
		return rowUpdated;
	}
	
	// select employee by id
	public Employee selectEmployee(int empId) {
		Employee employee = null;
		try(Connection connection = getConnection();
				PreparedStatement preparedStatement = connection.prepareStatement(SELECT_EMPLOYEE_BY_ID);){
			preparedStatement.setInt(1, empId);
			System.out.println(preparedStatement);
			ResultSet rs = preparedStatement.executeQuery();
			
			while(rs.next()) {
				String empName = rs.getString("empname");
				String empAdd = rs.getString("empadd");
				employee = new Employee(empId, empName, empAdd);
			}
		}catch(SQLException e) {
			e.printStackTrace();
		}
		return employee;
	}
	//select employees
	public List<Employee> selectAllEmployees(){
		java.util.List<Employee> employees = new ArrayList<>();
		try (Connection connection = getConnection();
				PreparedStatement preparedStatement = connection.prepareStatement(SELECT_ALL_EMPLOYEES);){
			System.out.println(preparedStatement);
			ResultSet rs = preparedStatement.executeQuery();
			while (rs.next()) {
				int empId = rs.getInt("empid");
				String empName = rs.getString("empname");
				String empAdd = rs.getString("empadd");
				employees.add(new Employee(empId, empName, empAdd));
			}
			}catch (SQLException e) {
				e.printStackTrace();
			}
		return employees;
		}
	
	// delete employee
	public boolean deleteEmployee(int empId) throws SQLException{
		boolean rowDeleted;
		try (Connection connection = getConnection();
				PreparedStatement statement = connection.prepareStatement(DELETE_EMPLOYEES_SQL);){
			statement.setInt(1, empId);
			rowDeleted = statement.executeUpdate() > 0;
		}
		return rowDeleted;
	}
	
	}
	
	
	


